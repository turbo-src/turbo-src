version: "3.0"

services:
  turbosrc-ingress-router:
    build: ./turbosrc-ingress-router/
    restart: always
    ports:
      - 4005:4005
    env_file:
      - ./turbosrc-ingress-router/service.env

  turbosrc-egress-router:
    build: ./turbosrc-egress-router/
    restart: always
    ports:
      - 4006:4006
      - 4007:4007
    env_file:
      - ./turbosrc-egress-router/service.env
    volumes:
      - turboSrcInstancesVolume:/app/turboSrcInstances

  turbosrc-engine:
    build: ./turbosrc-engine/
    restart: always
    depends_on:
      - db
    ports:
      - 4002:4002
    env_file:
      - ./turbosrc-engine/service.env
    tty: true

  db:
    image: postgres:13.7-bullseye
    restart: always
    ports:
      - 54320:5432
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: privatestore
    volumes:
      - db-data:/db-data/

  turbosrc-service:
    build: ./turbosrc-service/
    restart: always
    ports:
      - 4000:4000
    depends_on:
      - db
      - ssl-proxy

  gh-service:
    build: ./turbosrc-gh/
    restart: always
    ports:
      - 4004:4004
    environment:
      DOCKER_DB_URL: postgresql://user:password@gh-db:5432/gh-service
    depends_on:
      - gh-db
    tty: true

  gh-db:
    image: postgres:13.7-bullseye
    restart: always
    ports:
      - 54350:5432
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: gh-service
    volumes:
      - gh-db-data:/db-data/

  namespace-service:
    build: ./turbosrc-namespace/
    restart: always
    ports:
      - 4003:4003
    environment:
      DOCKER_DB_URL: postgresql://user:password@namespace-db:5432/namespace-db
    depends_on:
      - namespace-db
    tty: true

  namespace-db:
    image: postgres:13.7-bullseye
    restart: always
    ports:
      - 54330:5432
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: namespace-db
    volumes:
      - namespace-db-data:/db-data/

  chrome-extension:
    build: ./chrome-extension/
    user: "${UID}:${GID}"
    volumes:
      - ./chrome-extension/dist:/app/dist
    tty: true

  git-service:
    build: ./git-service/
    image: git-service:latest
    restart: always
    depends_on:
      - git-service-db
    ports:
      - 4008:4008
    environment:
      DOCKER_DB_URL: postgresql://user:password@git-service-db:5432/git-service-db
    tty: true

  git-service-db:
    image: postgres:13.7-bullseye
    restart: always
    ports:
      - 54351:5432
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: git-service-db
    volumes:
      - git-service-db-data:/db-data/

  gitea:
    image: gitea/gitea:1.21.3
    container_name: gitea
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - GITEA__database__DB_TYPE=postgres
      - GITEA__database__HOST=postgres:5432
      - GITEA__database__NAME=gitea
      - GITEA__database__USER=gitea
      - GITEA__database__PASSWD=gitea
    restart: always
    volumes:
      - ./gitea:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "3000:3000"
      - "222:22"
    depends_on:
      - postgres

  postgres:
    image: postgres:13.7-bullseye
    restart: always
    environment:
      - POSTGRES_USER=gitea
      - POSTGRES_PASSWORD=gitea
      - POSTGRES_DB=gitea
    volumes:
      - postgres-data:/var/lib/postgresql/data

  tsrc-dev:
    build:
      context: .
      dockerfile: ./dockerfile.tsrc-dev

  gihtubmakertools:
    build: ./GihtubMakerTools/

  create_pull_requests:
    build: ./create_pull_requests/

  fork-repo:
    build: ./fork-repo/

  jwt_hash_decrypt:
    build: ./jwt_hash_decrypt/

  # For local testing purposes, deploying a proxy server to accept insecure connections and forward them to the turbosrc, effectively stripping off SSL. This way, Chromium connects to the proxy without SSL, and the proxy handles the SSL part. There are some issues with ssl when connecting via docker network locally.
  ssl-proxy:
    image: mitmproxy/mitmproxy
    ports:
      - "8080:8080"  # Port 8080 for the proxy
    command: mitmdump --mode reverse:http://turbosrc-service:4000 --ssl-insecure

  viatui:
    build: ./viatui
    volumes:
      - ./viatui:/app
      - /tmp/.X11-unix:/tmp/.X11-unix
    environment:
      - DISPLAY=:1
    privileged: true

volumes:
  db-data:
  gh-db-data:
  namespace-db-data:
  turboSrcInstancesVolume:
  postgres-data:
  gitea-data:
  git-service-db-data:
